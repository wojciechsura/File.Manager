<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/******************************************************************************
*                                                                             *
* This code was generated automatically from a template. Don't modify it,     *
* because all your changes will be overwritten. Instead, if needed, modify    *
* the template file (*.tt)                                                    *
*                                                                             *
******************************************************************************/

using System;
using System.Diagnostics;

namespace File.Manager.Geometry
{
<# 
var types = new[] { "int", "float", "double" };
var names = new[] { "Int", "Float", "Double" };
var isFloats = new[] { false, true, true };
var twos = new[] { "2", "2.0f", "2.0" };

for (int i = 0; i < types.Count(); i++) {
	var t = types[i];
	var n = names[i];
	var isFloat = isFloats[i];
    var two = twos[i];
#>
    // *** Base<#=n#>Rectangle ***

    [DebuggerDisplay("<#=n#>Rectangle, {Left}; {Top}; {Width}; {Height}")]
    public abstract class Base<#=n#>Rectangle<TConcreteRectangle, TConcretePoint>
	    where TConcreteRectangle : Base<#=n#>Rectangle<TConcreteRectangle, TConcretePoint>
		where TConcretePoint : Base<#=n#>Point<TConcretePoint>
    {
        // Protected methods ------------------------------------------------------

        protected abstract TConcreteRectangle CreateRectangle(<#=t#> left, <#=t#> top, <#=t#> width, <#=t#> height);
        protected abstract TConcretePoint CreatePoint(<#=t#> x, <#=t#> y);

        // Public methods ---------------------------------------------------------

        public Base<#=n#>Rectangle(<#=t#> left, <#=t#> top, <#=t#> width, <#=t#> height)
        {
<# if (isFloat) { #>
            if (<#=t#>.IsNaN(left))
			    throw new ArgumentException(nameof(left));
            if (<#=t#>.IsNaN(top))
			    throw new ArgumentException(nameof(top));
            if (<#=t#>.IsNaN(width))
			    throw new ArgumentException(nameof(width));
            if (<#=t#>.IsNaN(height))
			    throw new ArgumentException(nameof(height));
<# } #>
            if (width < 0)
                throw new ArgumentOutOfRangeException(nameof(width));
            if (height < 0)
                throw new ArgumentOutOfRangeException(nameof(height));

	        Left = left;
            Top = top;
            Width = width;
            Height = height;
        }

		public bool Contains(TConcretePoint point)
		{
			return point.X >= Left && point.X <= Right && point.Y >= Top && point.Y <= Bottom;
		}

		public TConcreteRectangle ExtendBy(TConcretePoint point)
		{
            <#=t#> newLeft = Math.Min(Left, point.X);
            <#=t#> newTop = Math.Min(Top, point.Y);
            <#=t#> newRight = Math.Max(Right, point.X);
            <#=t#> newBottom = Math.Max(Bottom, point.Y);

<# if (isFloat) { #>
            return CreateRectangle(newLeft, newTop, newRight - newLeft, newBottom - newTop);
<# } else { #>
            return CreateRectangle(newLeft, newTop, newRight - newLeft + 1, newBottom - newTop + 1);
<# } #>
		}

        public TConcreteRectangle Offset(<#=t#> dLeft, <#=t#> dTop) 
        {
            <#=t#> newLeft = Left + dLeft;
            <#=t#> newTop = Top + dTop;

            return CreateRectangle(newLeft, newTop, Width, Height);
        }

        public TConcreteRectangle OffsetSize(<#=t#> dWidth, <#=t#> dHeight)
        {
            <#=t#> newWidth = Math.Max(0, Width + dWidth);
            <#=t#> newHeight = Math.Max(0, Height + dHeight);

            return CreateRectangle(Left, Top, newWidth, newHeight);
        }

		public bool IntersectsWith(TConcreteRectangle rect) 
		{
			return rect.Left <= Right &&
				rect.Right >= Left &&
				rect.Top <= Bottom &&
				rect.Bottom >= Top;
		}

        // Public properties ------------------------------------------------------

        public <#=t#> Left { get; }    
        public <#=t#> Top { get; }
<# if (isFloat) { #>
        public <#=t#> Right => Left + Width;
        public <#=t#> Bottom => Top + Height;
<# } else { #>
        public <#=t#> Right => Left + Width - 1;
        public <#=t#> Bottom => Top + Height - 1;
<# } #>
        public <#=t#> Width { get; }
        public <#=t#> Height { get; }

        public TConcretePoint TopLeft => CreatePoint(Left, Top);
        public TConcretePoint BottomLeft => CreatePoint(Left, Bottom);
        public TConcretePoint TopRight => CreatePoint(Right, Top);
        public TConcretePoint BottomRight => CreatePoint(Right, Bottom);

        public TConcretePoint Center => CreatePoint(Left + Width / <#=two#>, Top + Height / <#=two#>);
    }

<#
}
#>
}